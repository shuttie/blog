<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flink on Roman Grebennikov</title>
    <link>https://dfdx.me/tags/flink/</link>
    <description>Recent content in flink on dfdx.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Roman Grebennikov</copyright>
    <lastBuildDate>Wed, 20 May 2020 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://dfdx.me/tags/flink/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Speeding up Apache Flink string serialization</title>
      <link>https://dfdx.me/post/2020_flink_serialization/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://dfdx.me/post/2020_flink_serialization/</guid>
      <description>
      
      Because it can be extremely slow in some not-so-rare cases
      
      </description>
    </item>
    <item>
      <title>Extending flink state serialization</title>
      <link>https://dfdx.me/talks/ff19_state_serialization/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dfdx.me/talks/ff19_state_serialization/</guid>
      <description>
      
      Operations with Flink state are a common source of performance issues for a typical stateful stream processing application. One tiny mistake can easily make your job to spend most of a precious CPU time in serialization and inflate a checkpoint size to the sky. In this talk we’ll focus on a Flink serialization framework and common problems happening around it
      
      </description>
    </item>
    
  </channel>
</rss>
